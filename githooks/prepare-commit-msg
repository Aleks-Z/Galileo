#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".
#
# The prepare-commit-msg hook is run before the commit message
# editor is fired up but after the default message is created.
# It lets you edit the default message before the commit author
# sees it. This hook takes a few parameters:
# $1 - the path to the file that holds the commit message so far, (as .git/MERGE_MSG)
# $2 - the type of commit, (as message or merge)
# $3 - the commit SHA-1 if this is an amended commit.
# echo "1 = $1, 2 = $2, 3 = $3"



echo "Running the prepare-commmit-message hook..."


GIT_DIR_="$(git rev-parse --git-dir)"
githooksConfig=$(cat $GIT_DIR_/../githooks/githooksConfig.txt)

# $fileToUpdate example: galileo.sma
fileToUpdate=$(echo $githooksConfig | cut -d',' -f 3)

# $updateFlagFile example: isToUpdateTheGalileoFile.txt
updateFlagFile=$GIT_DIR_/$(echo $githooksConfig | cut -d',' -f 4)

currentFile=$(git diff --name-only --cached)
currentBranch=$(basename $(git symbolic-ref HEAD))


# When the file "$updateFlagFile" exits, we must not to recreate it, as we just did
# that. This happens because the file "$updateFlagFile" is created to indicate that
# the version number already updated and doing it again would create an infinite loop.
if [ -f $updateFlagFile ]
then
    echo "Removing old prepare-commmit-message configuration file '$updateFlagFile'..."
    rm $updateFlagFile
    exit 0
fi


# This creates the flag file '$updateFlagFile' to indicate that 'post-checkout' and
# 'post-commit' hooks must to update the version number. It only updates whether the current
# branch the develop and the file being changed is "$fileToUpdate".
if [[ $currentFile == *"$fileToUpdate"* ]] && [[ $currentBranch == "develop" ]]
then
    echo "true" > $updateFlagFile
    echo "Successfully created the flag file '$updateFlagFile'"
else
    echo "The '$fileToUpdate' file is not being updated right now."
fi


# Exits the program using a successful exit status code.
exit 0


